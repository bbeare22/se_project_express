{
	"info": {
		"_postman_id": "46603396-6bb70301-9e23-42fe-8cef-e17433ed47a0",
		"name": "Sprint 12 Tests",
		"description": "In sprint 12 you've learned how to work with databases, set up security, and deploy your web application on a remote machine. Once you've created a server with an API and user authorization, it is time now to test your project with Postman tests.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "signup",
			"item": [
				{
					"name": "[+] [POST] Add User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5055f2a-bc37-4915-9d46-edf24230db8c",
								"exec": [
									"pm.test(\"Status code should be 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with form data\", () => {\r",
									"    const user = utils.getData(pm.response.json());\r",
									"\r",
									"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name\"));\r",
									"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with _id field\", () => {\r",
									"    const user = utils.getData(pm.response.json());\r",
									"\r",
									"    pm.expect(user).to.have.property('_id');\r",
									"    \r",
									"    pm.collectionVariables.set(\"user_id\", user._id);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-d143166d-5bdf-49a2-886c-e7da1c47434e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{user_name}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [POST] Add a user with \"name\" field less than 2 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95a7dd21-d770-43ff-aa59-8149560beda9",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"  pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-86d460e2-daa8-4148-a93b-5872d367fc8c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomAlphaNumeric}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [POST] Add a user with \"name\" field greater than 30 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa09c38b-287e-4470-a7e0-667ed83359cd",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"  pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-ce1db823-b259-454e-8c86-7d2e6995e7e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomLoremSentences}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [POST] Add a user without the required \"name\" field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3cac487-c1b9-4631-b952-c6cc0aa313c8",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"  pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-aa4b68bb-bf13-4a6d-9431-64f44d1c75c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [POST] Add a user without the required \"avatar\" field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a364b395-59f2-47f2-8616-c6ccd4d581a0",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"  pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-534f71ca-4c21-4bda-8743-67f15d2f9ca5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{user_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [POST] Add a user with an invalid url to the \"avatar\" field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4d00531-3134-4c81-a62c-e02260535090",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"  pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-d67175dd-e6f5-448d-b919-c6a0e48e9637",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{user_name}}\",\r\n    \"avatar\": \"{{user_avatar_incorrect}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			],
			"id": "46603396-9ff34f92-3e79-4e4c-a66f-73ccce7a30d9"
		},
		{
			"name": "users",
			"item": [
				{
					"name": "[+] [GET] Get list of users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2bb9c11f-7e1b-498c-8d00-3fbc19e98fb9",
								"exec": [
									"const name = pm.collectionVariables.get('user_name');",
									"const avatar = pm.collectionVariables.get('user_avatar');",
									"",
									"const createUserReqOpts = {",
									"    url: `${pm.collectionVariables.get(\"base_url\")}/users`,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    },",
									"    body: JSON.stringify({ name, avatar })",
									"}",
									"",
									"pm.sendRequest(createUserReqOpts, function (error, response) {",
									"    pm.test(\"Preliminary POST /users request should be successful\", () => {",
									"        pm.expect(response.code).to.be.oneOf([200, 201]);",
									"    });",
									"",
									"    try {",
									"        if (response.json()) {",
									"            const user = utils.getData(response.json());",
									"            pm.collectionVariables.set(\"user_id\", user._id);",
									"        }",
									"    } catch (e) { }",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3b89bba8-ff7f-4d4e-9f2a-77d08f62301e",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should be an array of users\", () => {\r",
									"    const users = utils.getData(pm.response.json());\r",
									"    \r",
									"    pm.expect(users).to.be.an(\"array\");\r",
									"    pm.expect(users.length).not.to.equal(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-3a3e761e-22f5-45b9-b468-3a5c02f4e7ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[+] [GET] Get a user by _id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f477224d-7509-468d-9107-1439f5b46a09",
								"exec": [
									"const name = pm.collectionVariables.get('user_name');",
									"const avatar = pm.collectionVariables.get('user_avatar');",
									"",
									"const createUserReqOpts = {",
									"\turl: `${pm.collectionVariables.get(\"base_url\")}/users`,",
									"  method: 'POST',",
									"  header: {",
									"    'Content-Type': 'application/json',",
									"  },",
									"  body: JSON.stringify({ name, avatar })",
									"}",
									"",
									"pm.sendRequest(createUserReqOpts, function (error, response) {",
									"  pm.test(\"Preliminary POST /users request should be successful\", () => {",
									"    pm.expect(response.code).to.be.oneOf([200, 201]);",
									"  });",
									"  try {",
									"    if (response.json()) {",
									"      const user = utils.getData(response.json());",
									"      pm.collectionVariables.set(\"user_id\", user._id);",
									"    }",
									"  } catch (e) {}  ",
									"  ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b0441b16-854b-4eb0-91f1-68052e82597c",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with user data\", () => {\r",
									"    const user = utils.getData(pm.response.json());\r",
									"\r",
									"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name\"));\r",
									"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-c2b05ea4-bb54-4734-b72e-b7f51a72a69a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/:userid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								":userid"
							],
							"variable": [
								{
									"id": "f44e3f28-61e4-4c1a-99ad-20b1070a690a",
									"key": "userid",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [GET] Get a user with an invalid _id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b7ff74b-4ac2-4405-bf75-d6acc9c40379",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-9b0fdcbb-9723-45df-826e-6e9e32e5bb04",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/invalid-fake-user-id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"invalid-fake-user-id"
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [GET] Get a user with an _id that does not exist in the database",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0ff13f9-2403-4ae2-8c1c-eff9af2e0ebe",
								"exec": [
									"pm.test(\"Status code should be 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-db733e3c-a987-4f53-8432-ba2c47f2a7f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/:userid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								":userid"
							],
							"variable": [
								{
									"id": "371fece5-adf9-4ab3-a1ad-ba980d91b8f0",
									"key": "userid",
									"value": "{{user_id_const}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "46603396-7590efbc-a7c0-4082-9fd7-cb6755302d8f"
		},
		{
			"name": "items",
			"item": [
				{
					"name": "[+] [POST] Add an item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23b80dac-8b74-4c5f-bdfa-df9522317af4",
								"exec": [
									"pm.test(\"Status code should be 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with form data\", () => {\r",
									"    const item = utils.getData(pm.response.json());\r",
									"\r",
									"    pm.expect(item.name).to.eql(pm.collectionVariables.get(\"item_name\"));\r",
									"    pm.expect(item.weather).to.eql(pm.collectionVariables.get(\"item_weather\"));\r",
									"    pm.expect(item.imageUrl).to.eql(pm.collectionVariables.get(\"item_imageUrl\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with filed _id\", () => {\r",
									"    const item = utils.getData(pm.response.json());\r",
									"\r",
									"    pm.expect(item).to.have.property('_id');\r",
									"\r",
									"    pm.collectionVariables.set(\"item_id\", item._id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-f9b41096-8f59-46ff-96ed-dedad9b66d1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{item_name}}\",\r\n    \"weather\": \"{{item_weather}}\",\r\n    \"imageUrl\": \"{{item_imageUrl}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [POST] Add an item with \"name\" field less than 2 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba68c064-efbc-4320-bff7-f5223aa32bc9",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-ed5d979b-3451-4ce0-ab6f-eea6be322b0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomAlphaNumeric}}\",\r\n    \"weather\": \"{{item_weather}}\",\r\n    \"imageUrl\": \"{{item_imageUrl}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [POST] Add an item with \"name\" field greater than 30 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e77a6985-e964-4312-bf04-df5d5c234a5b",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-6d735b2e-5b3e-4684-be71-df756b98bceb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomLoremSentences}}\",\r\n    \"weather\": \"{{item_weather}}\",\r\n    \"imageUrl\": \"{{item_imageUrl}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [POST] Add an item without the required \"name\" field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "227413a7-7ad3-4fbf-8efc-b8af62bdd359",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-836b4718-2186-4d44-ab75-6f92535f99ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"weather\": \"{{item_weather}}\",\r\n    \"imageUrl\": \"{{item_imageUrl}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [POST] Add an item without the required \"weather\" field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8ee7a15-c6e0-493e-9ba0-25be1a4ee59e",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-562156e5-4546-4048-a973-a1bca57deeab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{item_name}}\",\r\n    \"imageUrl\": \"{{item_imageUrl}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [POST] Add an item with an invalid url to the \"imageUrl\" field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84547a74-496c-4afb-8c2c-98016e52241a",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-d57ebaf0-ac24-4822-91a8-9ce57612e047",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{item_name}}\",\r\n    \"weather\": \"{{item_weather}}\",\r\n    \"imageUrl\": \"{{item_imageUrl_incorrect}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "[+] [GET] Get list of items",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "16634262-6456-408e-aebe-267a9a673670",
								"exec": [
									"const name = pm.collectionVariables.get('item_name');",
									"const weather = pm.collectionVariables.get('item_weather');",
									"const imageUrl = pm.collectionVariables.get('item_imageUrl');",
									"",
									"const createItemReqOpts = {",
									"\turl: `${pm.collectionVariables.get(\"base_url\")}/items`,",
									"  method: 'POST',",
									"  header: {",
									"    'Content-Type': 'application/json',",
									"  },",
									"  body: JSON.stringify({ name, weather, imageUrl })",
									"}",
									"",
									"pm.sendRequest(createItemReqOpts, function (error, response) {",
									"  pm.test(\"Preliminary POST /items request should be successful\", () => {",
									"    pm.expect(response.code).to.be.oneOf([200, 201]);",
									"  });",
									"  try {",
									"    if (response.json()) {",
									"      const item = utils.getData(response.json());",
									"      pm.collectionVariables.set(\"item_id\", item._id);",
									"    }",
									"  } catch (e) {}",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9afbec46-2b80-4fcc-a7dd-305fe1d3cb9a",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should be a list of items\", () => {\r",
									"    const items = utils.getData(pm.response.json());\r",
									"    \r",
									"    pm.expect(items).to.be.an(\"array\");\r",
									"    pm.expect(items.length).not.to.equal(0);\r",
									"\r",
									"    pm.collectionVariables.set(\"user_id_code\", items[items.length - 1].owner);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-2be1cc16-2efa-4ea0-857a-e73dec084bec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "[+] [PUT] Likes an item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87245458-8b65-456c-a9c0-2fbdb31de913",
								"exec": [
									"const name = pm.collectionVariables.get('item_name');",
									"const weather = pm.collectionVariables.get('item_weather');",
									"const imageUrl = pm.collectionVariables.get('item_imageUrl');",
									"",
									"const createItemReqOpts = {",
									"\turl: `${pm.collectionVariables.get(\"base_url\")}/items`,",
									"  method: 'POST',",
									"  header: {",
									"    'Content-Type': 'application/json',",
									"  },",
									"  body: JSON.stringify({ name, weather, imageUrl })",
									"}",
									"",
									"pm.sendRequest(createItemReqOpts, function (error, response) {",
									"",
									"  pm.test(\"Preliminary POST /items request is successful\", () => {",
									"    pm.expect(response.code).to.be.oneOf([200, 201]);",
									"  });",
									"",
									"  try {",
									"    if (response.json()) {",
									"      const item = utils.getData(response.json());",
									"      pm.collectionVariables.set(\"item_id\", item._id);",
									"    }",
									"  } catch (e) {}",
									"  ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e746d5f5-638c-4384-9b6d-f1d8a33c2620",
								"exec": [
									"pm.test(\"Status code should be 200 or 201\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-3d23d282-ab0c-4a17-8ad3-9d9647ebd919",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items/:id/likes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								":id",
								"likes"
							],
							"variable": [
								{
									"id": "ff78b7df-772f-4bac-bce7-4aa3334de097",
									"key": "id",
									"value": "{{item_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [PUT] Likes an item with an incorrect _id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f64dd991-a802-4bbd-83e0-ff9270417a43",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-bd211e22-4f6e-4733-becb-87c8e0607aba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items/:id/likes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								":id",
								"likes"
							],
							"variable": [
								{
									"id": "d72e131f-5a88-4992-b251-d134fc13b02f",
									"key": "id",
									"value": "text"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [PUT] Likes an item with a non-existent _id in the database",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b526188d-0b0b-4e07-8415-0afe12b6025d",
								"exec": [
									"pm.test(\"Status code should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-7d0521bf-c3cf-41d0-a3fc-6c94f08dec89",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items/:id/likes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								":id",
								"likes"
							],
							"variable": [
								{
									"id": "08636b61-4872-42f0-87ff-d1a67c0b02d0",
									"key": "id",
									"value": "{{user_id_const}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [DELETE] Unlikes an item with an incorrect _id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbe75419-4ec2-4465-8260-01ce71193c18",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"  pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-c02f8002-75ab-4c49-91e8-83846466a001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items/:id/likes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								":id",
								"likes"
							],
							"variable": [
								{
									"id": "dc26e7d4-2042-4bbd-8d43-b9519736dc36",
									"key": "id",
									"value": "text"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [DELETE] Unlikes an item with a non-existent _id in the database",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "064c011c-a08d-4d64-8287-87368e860ac2",
								"exec": [
									"pm.test(\"Status code should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-7f2322b7-40b9-4abf-b942-bafaea93c3de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items/:id/likes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								":id",
								"likes"
							],
							"variable": [
								{
									"id": "9712aeba-d1a8-4195-a381-9a32c37ed9fd",
									"key": "id",
									"value": "{{user_id_const}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[+] [DELETE] Unlikes an item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1b07461-c05e-4c46-99d5-06984e43e61b",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "46896ffb-7a94-40d6-8669-1fbf97648914",
								"exec": [
									"const name = pm.collectionVariables.get('item_name');",
									"const weather = pm.collectionVariables.get('item_weather');",
									"const imageUrl = pm.collectionVariables.get('item_imageUrl');",
									"",
									"const createItemReqOpts = {",
									"\turl: `${pm.collectionVariables.get(\"base_url\")}/items`,",
									"  method: 'POST',",
									"  header: {",
									"    'Content-Type': 'application/json',",
									"  },",
									"  body: JSON.stringify({ name, weather, imageUrl })",
									"}",
									"",
									"pm.sendRequest(createItemReqOpts, function (error, response) {",
									"  ",
									"  if (response.json()) {",
									"    const item = utils.getData(response.json());",
									"\t\tpm.collectionVariables.set(\"item_id\", item._id);",
									"  }",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-ac414bef-1891-46d7-b77e-25c47f6c9fab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items/:id/likes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								":id",
								"likes"
							],
							"variable": [
								{
									"id": "41a8057e-40bb-4b95-a89b-e6cbd4c8ccbf",
									"key": "id",
									"value": "{{item_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[+] [GET] Check if an item has no likes after delete it",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06643ea5-1c57-42df-a69d-713db01df53c",
								"exec": [
									"pm.test(\"The response body should have json with an empty 'likes' property\", () => {\r",
									"    const items = utils.getData(pm.response.json());\r",
									"    console.log({ items })\r",
									"    const userId = pm.collectionVariables.get(\"user_id_code\");\r",
									"    const itemId = pm.collectionVariables.get(\"item_id\");\r",
									"    const item = items?.find((item) => item._id === itemId);\r",
									"\r",
									"    pm.expect(!!item?.likes?.includes(userId)).to.eq(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0e9ac589-7365-49d6-8be4-f531d508659a",
								"exec": [
									"const name = pm.collectionVariables.get('item_name');",
									"const weather = pm.collectionVariables.get('item_weather');",
									"const imageUrl = pm.collectionVariables.get('item_imageUrl');",
									"",
									"const createItemReqOpts = {",
									"\turl: `${pm.collectionVariables.get(\"base_url\")}/items`,",
									"  method: 'POST',",
									"  header: {",
									"    'Content-Type': 'application/json',",
									"  },",
									"  body: JSON.stringify({ name, weather, imageUrl })",
									"}",
									"",
									"pm.sendRequest(createItemReqOpts, function (error, response) {",
									"  pm.test(\"Preliminary POST /items request should be successful\", () => {",
									"    pm.expect(response.code).to.be.oneOf([200, 201]);",
									"  });",
									"",
									"  try {",
									"    if (response.json()) {",
									"      const item = utils.getData(response.json());",
									"      pm.collectionVariables.set(\"item_id\", item._id);",
									"    }",
									"  } catch (e) {}",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-4eab3ebc-653f-4ca9-8f93-1737c98bc97e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "[+] [DELETE] Deletes an item by _id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8d0c3cd-6b77-4cbe-ab0b-a87a578252d3",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a4904ac-9a2d-4d2b-8503-9b4410f8be44",
								"exec": [
									"const name = pm.collectionVariables.get('item_name');",
									"const weather = pm.collectionVariables.get('item_weather');",
									"const imageUrl = pm.collectionVariables.get('item_imageUrl');",
									"",
									"const createItemReqOpts = {",
									"\turl: `${pm.collectionVariables.get(\"base_url\")}/items`,",
									"  method: 'POST',",
									"  header: {",
									"    'Content-Type': 'application/json',",
									"  },",
									"  body: JSON.stringify({ name, weather, imageUrl })",
									"}",
									"",
									"pm.sendRequest(createItemReqOpts, function (error, response) {",
									"  pm.test(\"Preliminary POST /items request should be successful\", () => {",
									"    pm.expect(response.code).to.be.oneOf([200, 201]);",
									"  });",
									"",
									"  try {",
									"    if (response.json()) {",
									"      const item = utils.getData(response.json());",
									"      pm.collectionVariables.set(\"item_id\", item._id);",
									"    }",
									"  } catch (e) {}",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-aebd5592-cb04-4238-8aaf-27c76c81f2b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								":id"
							],
							"variable": [
								{
									"id": "c12340d9-f1bd-4b84-a515-28d1f1f3eddf",
									"key": "id",
									"value": "{{item_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[+] [GET] Check if an item is missing in the database after deleting it",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ef13c85-024c-45ac-9548-76cb2a83833c",
								"exec": [
									"pm.test(\"The deleted item must not still be in the database\", () => {\r",
									"    const items = utils.getData(pm.response.json());\r",
									"    const deletedId = pm.collectionVariables.get(\"item_id\");\r",
									"    const hasItem = !!items?.find((item) => item._id === deletedId);\r",
									"\r",
									"    pm.expect(hasItem).to.eq(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "36c0f2a8-d21e-4727-a81e-493d27be4ba1",
								"exec": [
									"const id = pm.collectionVariables.get('item_id');",
									"",
									"const createItemReqOpts = {",
									"\turl: `${pm.collectionVariables.get(\"base_url\")}/items/${id}`,",
									"  method: 'DELETE',",
									"  header: {",
									"    'Content-Type': 'application/json',",
									"  },",
									"}",
									"",
									"pm.sendRequest(createItemReqOpts, function (error, response) {",
									"  pm.test(`Preliminary DELETE /items/${id} request should be successful`, () => {",
									"  pm.expect(response.code).to.be.oneOf([200, 201, 404]);",
									"});",
									"",
									"try {",
									"  console.log(error ? error : response.json());",
									"} catch (e) {}",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-34e7c243-2d27-43ff-9310-0025af2149e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [DELETE] Deletes an item with an incorrect _id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec75915e-bfdd-441d-992f-8530cef206ac",
								"exec": [
									"pm.test(\"Status code should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-e4032917-1db3-40b5-9878-822376f6e784",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								":id"
							],
							"variable": [
								{
									"id": "2d48cad5-7b90-4d51-b9e7-2def47cdd56e",
									"key": "id",
									"value": "text"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[-] [DELETE] Deletes an item with a non-existent _id in the database",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b46044e2-184d-4fc3-92c8-1038851b5170",
								"exec": [
									"pm.test(\"Status code should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have json with a 'message' property\", () => {\r",
									"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46603396-d0e39be5-8736-44cd-adbf-346f323ff434",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								":id"
							],
							"variable": [
								{
									"id": "336e7026-28d7-4920-bcc8-9b6ba4d072f0",
									"key": "id",
									"value": "{{user_id_const}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "46603396-3439262f-9620-4907-9fac-ae09152ad05c"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8b7d2301-800b-4d41-8488-857e5de2438b",
				"type": "text/javascript",
				"exec": [
					"const schemaMessageOnly = {",
					"    \"type\": \"object\",",
					"    \"properties\": {",
					"        \"message\": {",
					"            \"type\": \"string\",",
					"            \"minLength\": 1",
					"        }",
					"    },",
					"    \"required\": [\"message\"]",
					"};",
					"",
					"pm.collectionVariables.set(\"schema_message_only\", JSON.stringify(schemaMessageOnly));",
					"",
					"utils = {",
					"    getData: (jsonData) => {",
					"        if(Array.isArray(jsonData)) {",
					"            return jsonData;",
					"        }",
					"",
					"        const keys = Object.keys(jsonData);",
					"        const firstKey = keys[0];",
					"        const firstKeyValue = jsonData[firstKey];",
					"",
					"        return keys.length === 1 && typeof firstKeyValue === 'object' ? firstKeyValue : jsonData;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2b916576-3715-46d7-b1fa-50ce2e601d41",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response should contain a JSON object\", () => {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3001"
		},
		{
			"key": "user_name",
			"value": "test"
		},
		{
			"key": "user_avatar",
			"value": "https://example.com/av.bmp"
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "user_id_const",
			"value": "61eade4c6d5acf558c42d9b8"
		},
		{
			"key": "user_name_incorrect",
			"value": "n"
		},
		{
			"key": "user_avatar_incorrect",
			"value": "https://thisisnotvalidurl"
		},
		{
			"key": "item_name",
			"value": "testItem"
		},
		{
			"key": "item_imageUrl",
			"value": "https://example.com/link.test"
		},
		{
			"key": "item_weather",
			"value": "hot",
			"type": "string"
		},
		{
			"key": "item_id",
			"value": ""
		},
		{
			"key": "schema_message_only",
			"value": ""
		},
		{
			"key": "item_imageUrl_incorrect",
			"value": "https://thisisnotvalidurl",
			"type": "string"
		},
		{
			"key": "user_id_code",
			"value": ""
		}
	]
}